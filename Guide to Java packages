OVERVIEW
In Java, we use packages to group related classes, interfaces, and sub-packages.

The main benefits of doing this are:

Making related types easier to find – packages usually contain types that are logically related
Avoiding naming conflicts – a package will help us to uniquely identify a class; for example, we could have a com.baeldung.Application, as well as com.example.Application classes
Controlling access – we can control visibility and access to types by combining packages and access modifiers

CREATING PACKAGE
To create a package, we have to use the package statement by adding it as the very first line of code in a file.
package com.google.search;

If we define types and don’t place them in a package, they will go in the default or unnamed package. Using default packages comes with a few disadvantages:

We lose the benefits of having a package structure and we can’t have sub-packages
We can’t import the types in the default package from other packages
The protected and package-private access scopes would be meaningless
As the Java language specification states, unnamed packages are provided by the Java SE Platform principally for convenience when developing small or temporary applications or when just beginning development.

Therefore, we should avoid using unnamed or default packages in real-world applications.

NAMING CONVENTIONS
In order to avoid packages with the same name, we follow some naming conventions:

we define our package names in all lower case
package names are period-delimited
names are also determined by the company or organization that creates them
To determine the package name based on an organization, we’ll typically start by reversing the company URL. After that, the naming convention is defined by the company and may include division names and project names.

com.google

DIRECTORY STRUCTURE
Packages in Java correspond with a directory structure.

Each package and subpackage has its own directory. So, for the package com.google.packages, we should have a directory structure of com -> google -> packages.

Most IDE’s will help with creating this directory structure based on our package names, so we don’t have to create these by hand.

package com.baeldung.packages.domain;

public class TodoItem {
    private Long id;
    private String description;
    
    // standard getters and setters
}

IMPORTS
In order to use our TodoItem class from a class in another package, we need to import it. Once it’s imported, we can access it by name.

We can import a single type from a package or use an asterisk to import all of the types in a package.

com.java.utils.*;

We can import pre-existing classes that we want to use in our project in the same manner.
For example, let’s import the Java core List interface and ArrayList class:

com.java.utils.ArrayList;
com.java.utils.List;

We can then use these types in our application by simply using their name:

public class TodoList {
    private List<TodoItem> todoItems;

    public void addTodoItem(TodoItem todoItem) {
        if (todoItems == null) {
            todoItems = new ArrayList<TodoItem>();
        }
        todoItems.add(todoItem);
    }
}

FULLY QUALIFIED NAME
Sometimes, we may be using two classes with the same name from different packages. For example, we might be using both java.sql.Date and java.util.Date. When we run into naming conflicts, we need to use a fully qualified class name for at least one of the classes.

Let’s use TodoItem with a fully qualified name:

public class TodoList {
    private List<com.baeldung.packages.domain.TodoItem> todoItems;

    public void addTodoItem(com.baeldung.packages.domain.TodoItem todoItem) {
        if (todoItems == null) {
            todoItems = new ArrayList<com.baeldung.packages.domain.TodoItem>();
        }
        todoItems.add(todoItem);
    }

    // standard getters and setters
}
